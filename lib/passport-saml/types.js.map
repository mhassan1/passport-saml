{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/passport-saml/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as express from 'express';\nimport * as passport from 'passport';\nimport type { CacheProvider } from './inmemory-cache-provider';\n\nexport type CertCallback = (callback: (err: Error | null, cert?: string | string[]) => void) => void;\n\nexport interface AuthenticateOptions extends passport.AuthenticateOptions {\n  additionalParams?: Record<string, any>;\n}\n\nexport interface AuthorizeOptions extends AuthenticateOptions {\n  samlFallback?: 'login-request' | 'logout-request';\n}\n\nexport interface SamlConfig {\n    // Core\n    callbackUrl?: string;\n    path?: string;\n    protocol?: string;\n    host?: string;\n    entryPoint?: string;\n    issuer?: string;\n    privateCert?: string;\n    cert?: string | string[] | CertCallback;\n    decryptionPvk?: string;\n    signatureAlgorithm?: 'sha1' | 'sha256' | 'sha512';\n\n    // Additional SAML behaviors\n    additionalParams?: any;\n    additionalAuthorizeParams?: any;\n    identifierFormat?: string;\n    acceptedClockSkewMs?: number;\n    attributeConsumingServiceIndex?: string | null;\n    disableRequestedAuthnContext?: boolean;\n    authnContext?: string;\n    forceAuthn?: boolean;\n    skipRequestCompression?: boolean;\n    authnRequestBinding?: string;\n    RACComparison?: 'exact' | 'minimum' | 'maximum' | 'better';\n    providerName?: string;\n    passive?: boolean;\n    idpIssuer?: string;\n    audience?: string;\n    scoping? : SamlScopingConfig;\n\n    // InResponseTo Validation\n    validateInResponseTo?: boolean;\n    requestIdExpirationPeriodMs?: number;\n    cacheProvider?: CacheProvider;\n\n    // Passport\n    name?: string;\n    passReqToCallback?: boolean;\n\n    // Logout\n    logoutUrl?: string;\n    additionalLogoutParams?: any;\n    logoutCallbackUrl?: string;\n}\n\nexport interface SamlScopingConfig {\n  idpList: SamlIDPListConfig[];\n  proxyCount?: number;\n  requesterId?: string[];\n}\n\nexport type XMLValue = string | number | boolean | null | XMLObject | XMLValue[];\n\nexport type XMLObject = {\n  [key: string]: XMLValue;\n};\n\nexport type XMLInput = XMLObject;\n\nexport interface AuthorizeRequestXML {\n  'samlp:AuthnRequest': XMLInput;\n}\n\nexport interface LogoutRequestXML {\n  'samlp:LogoutRequest': {\n    'saml:NameID': XMLInput;\n    [key: string]: XMLValue;\n  };\n}\n\nexport interface ServiceMetadataXML {\n  EntityDescriptor: {\n    [key: string]: XMLValue;\n    SPSSODescriptor: XMLObject;\n  };\n}\n\nexport interface AudienceRestrictionXML {\n  Audience?: XMLObject[];\n}\n\nexport type XMLOutput = Record<string, any>;\n\nexport interface SamlIDPListConfig {\n  entries: SamlIDPEntryConfig[];\n  getComplete?: string;\n}\n\nexport interface SamlIDPEntryConfig {\n  providerId: string;\n  name?: string;\n  loc?: string;\n}\n\nexport type Profile = {\n    issuer?: string;\n    sessionIndex?: string;\n    nameID?: string;\n    nameIDFormat?: string;\n    nameQualifier?: string;\n    spNameQualifier?: string;\n    ID?: string;\n    mail?: string; // InCommon Attribute urn:oid:0.9.2342.19200300.100.1.3\n    email?: string; // `mail` if not present in the assertion\n    ['urn:oid:0.9.2342.19200300.100.1.3']?: string;\n    getAssertionXml(): string; // get the raw assertion XML\n    getAssertion(): Record<string, unknown>; // get the assertion XML parsed as a JavaScript object\n    getSamlResponseXml(): string; // get the raw SAML response XML\n  } & {\n    [attributeName: string]: unknown; // arbitrary `AttributeValue`s\n  };\n\n  export interface RequestWithUser extends express.Request {\n    samlLogoutRequest: any;\n    user?: Profile\n}\n  \nexport type VerifiedCallback = (err: Error | null, user?: Record<string, unknown>, info?: Record<string, unknown>) => void;\n\nexport type VerifyWithRequest = (req: express.Request, profile: Profile | null | undefined, done: VerifiedCallback) => void;\n\nexport type VerifyWithoutRequest = (profile: Profile | null | undefined, done: VerifiedCallback) => void;\n"]}